/*
 * OData query expression grammar.
 * Note: use this gramar with pegjs:
 *  - http://pegjs.majda.cz/ 
 *  - https://github.com/dmajda/pegjs
 */

 {
    fn = function(name, args) {
        if (args.length === 1) {
            return { type: "fn_1", name: name, p1: args[0] };
        } else if (args.length === 2) {
            return { type: "fn_2", name: name, p1: args[0], p2: args[1] };
        } else if (args.length === 3) {
            return { type: "fn_3", name: name, p1: args[0], p2: args[1], p3: args[2] };
        }
    }

     buildString = function(s1, slist, delim) {
        if (Array.isArray(s1)) {
           s1 = s1[0];
        }
        if (slist && slist.length > 0) {
            return s1 + delim + slist.join(delim);
        } else {
            return s1;
        }
    }

    flatten = function(list) {
        if (list.join) {
           var f = list.map(function(l) { return flatten(l); }  );
           return f.join('');
        } else {
           return list;
        }
    }

    flatten2 = function(item, list) {
        if (list === "") list = [];
        if (Array.isArray(list[0])) {
            list = list[0];
        }
        list.unshift(item);
        return list;
    }


    parseFloat2 = function(x) {
        return parseFloat(flatten(x));
    }
 }

start          = query

wsp                         =  ' '  //Whitespace


hexdigit      =   [0-9a-fA-F]

//peg does not support repetition (ie: [a]{4})
hexdigit2     =   hexdigit hexdigit
hexdigit4     =   hexdigit2 hexdigit2
hexdigit8     =   hexdigit4 hexdigit4
squote        =   "%x27" / "'"

unescChar     = "''" { return "'" };
// this is needed to handle '' inside of a quoted string i.e. 'asdf''adfadf'
escString     = v:(unescChar / [^'])* { return v.join(""); }



digit         = [0-9]
digit19       = [1-9]
digits        = digit+
frac          = "." digits
e             = [eE] [+-]?
exp           = e digits

int           = digit19 digits
              / digit
              / "-" digit19 digits
              / "-" digit

number        = parts:(int frac exp)[mMfL]?  { return parseFloat2(parts); }
              / parts:(int frac)[mMfL]?      { return parseFloat2(parts); }
              / parts:(int exp)[mMfL]?       { return parseFloat2(parts); }
              / parts:(int)[mMfL]?           { return parseFloat2(parts); }


year          =  a:digit b:digit c:digit d:digit { return a + b + c + d; }
month         = ([0-1] digit) / ("2" [0-4])
day           = ([0-2] digit) / ("3" [0-1])
hour          = month
minute        = ([0-5] digit) / ("60")
second        = minute
nanoSeconds   =  digit+
timeZone      = ( ("+" / "-") hour ':' minute ) / 'Z'

sign                        =  "+" / "-"
nan                         =  "NaN"
negativeInfinity            =  "-INF"
positiveInfinity            =  "INF"
nanInfinity                 =  nan / negativeInfinity / positiveInfinity

unreserved                  =  a:[a-zA-Z0-9-_]+ { return a.join(''); }


dateTime                    = a:(year "-" month "-" day "T" hour ":" minute (":" second ("." nanoSeconds)?)? timeZone?) { return flatten(a) }
// same as above but with timeZone reqd.
dateTimeOffset              = a:(year "-" month "-" day "T" hour ":" minute (":" second ("." nanoSeconds)?)? timeZone) { return flatten(a) }

identifierPart              =  a:[a-zA-Z_] b:unreserved { return a + b; }
identifier                  =  a:identifierPart list:("." i:identifier {return i;})? { return flatten2(a, list) }


nullLiteral                 =  "null" ( "'" identifier "'" )?
                                  { return { type: "lit_null" } }
                                // The optional qualifiedTypeName is used to specify what type this null value should be considered.
                                // Knowing the type is useful for function overload resolution purposes.

binaryLiteral               =  binary:(( "%d88" / "binary" ) squote hexdigit hexdigit squote)
                                  { return { type: "lit_binary", value: binary } }
                                // note: "X" is case sensitive "binary" is not hence using the character code.

booleanLiteral              =  "true"  { return { type: "lit_boolean", value: true  } } /
                               "false" { return { type: "lit_boolean", value: false } }

dateTimeLiteral             =  "datetime" squote a:dateTime squote
                                 { return { type: "lit_datetime", value: new Date(a) } }

dateTimeOffsetLiteral       =  "datetimeoffset" squote a:dateTimeOffset squote
                                 { return { type: "lit_dateTimeOffset", value: new Date(a) } }

numericLiteral              =  number:number
                                 { return { type: "lit_number", value: number } }

guidLiteral                 =  "guid" squote guid:([^'])+ squote
                                 { return { type: "lit_guid",   value: guid.join("") } }


stringLiteral               =  squote v:escString squote
                                 { return { type: "lit_string", value: v } }

literal                     =  nullLiteral /
                               binaryLiteral /
                               booleanLiteral /
                               numericLiteral /
                               dateTimeLiteral /
                               dateTimeOffsetLiteral /
                               guidLiteral /
                               stringLiteral


/*
 * OData query options
 */

// $top
top                         =  "$top=" a:int { return { '$top': ~~a }; }
                            /  "$top=" .* { return {"error": 'invalid $top parameter'}; }

// $expand
expand                      =  "$expand=" expr:expandExpr { return { "$expand": expr }; }
                            /  "$expand=" .* { return {"error": 'invalid $expand parameter'}; }

expandExpr                  =  i:identifierPath list:("," wsp? l:expandExpr {return l;})? { return flatten2(i, list) }

//$skip
skip                        =  "$skip=" a:int {return {'$skip': ~~a }; }
                            /  "$skip=" .* { return {"error": 'invalid $skip parameter'}; }

//$format
format                      =  "$format=" unreserved*
                            /  "$format=" .* { return {"error": 'invalid $format parameter'}; }
//$inlinecount
inlinecount                 =  "$inlinecount=" unreserved*
                            /  "$inlinecount=" .* { return {"error": 'invalid $inlinecount parameter'}; }

// $orderby
orderby                     =  "$orderby=" expr:orderbyExpr { return { "$orderby": expr }; }
                            /  "$orderby=" .* { return {"error": 'invalid $orderby parameter'}; }


orderbyExpr                 =  wsp* a:orderbyPath list:( wsp* "," wsp* op:orderbyPath {return op})* { return flatten2(a, list) }


orderbyPath              =  a:identifierPath ord:(wsp+ o:("asc"/"desc") { return o})? { return { path: a, isAsc: ord == "" || ord=="asc" }}


/*
orderbyExpr                 =  i:(id:identifier ord:(wsp ("asc"/"desc"))? {
                                    var result = {};
                                    result[id] = ord[1] || 'asc';
                                    return result;
                               })
                               list:("," wsp? l:orderbyExpr{return l;})? { return flatten2(i, list) }
*/

//$select
select                      =  "$select=" expr:selectExpr { return { "$select": expr }; }
                            /  "$select=" .* { return {"error": 'invalid $select parameter'}; }


// returns an array of paths
selectExpr                  =  wsp* a:identifierPath list:( wsp* "," wsp* ip:identifierPath {return ip})* { return flatten2(a, list) }

identifierPath              =  a:identifier list:("/" ip:identifierPath {return ip})* { return buildString(a, list, "/"); }


//filter
filter                      =  "$filter=" expr:filterExpr { return { "$filter": expr  }; }
                            /  "$filter=" .* { return {"error": 'invalid $filter parameter'}; }


filterExpr = wsp* p1:n0Expr x:(andOrExpr)*  {
   if (x.length > 0) {
      return { type: x[0].type, op: x[0].op, p1: p1, p2: x[0].p2 };
   } else {
      return p1;
   }
}

n0Expr   = wsp* p1:n1Expr x:(boolExpr)* {
   if (x.length > 0) {
         return { type: x[0].type, op: x[0].op, p1: p1, p2: x[0].p2 };
      } else {
         return p1;
      }
}

n1Expr   = wsp* p1:n2Expr x:(mathExpr)* {
   if (x.length > 0) {
         return { type: x[0].type, op: x[0].op, p1: p1, p2: x[0].p2 };
      } else {
         return p1;
      }
}

n2Expr   =  literal / parenExpr / unaryExpr / methodCallExpr / memberExpr

andOrExpr  =   wsp+ op:andOrOp  wsp+ p2:filterExpr { return { type: "op_andOr", op:op, p2: p2 }}
boolExpr   =   wsp+ op:boolOp   wsp+ p2:n0Expr   { return { type: "op_bool",  op:op, p2: p2 }}
mathExpr   =   wsp+ op:mathOp   wsp+ p2:n1Expr   { return { type: "op_math",  op:op, p2: p2 }}

memberExpr  =  member:identifierPath           { return { type: "member", value:  member  } }
parenExpr   = "("  expr:filterExpr  ")"          { return  expr   }

unaryExprOp =  "not " / "-"
unaryExpr   = op:unaryExprOp expr:filterExpr     { return { type: "op_unary", op: op, p1: expr } }

/* OData Precedence - only partially enforced here so far
      "-" , "not", cast
      "mul", "div", "mod";
      "add", "sub"
      "lt", "le", "gt", "ge"
      "eq"  , "ne"
      "and"
      "or";
*/

boolOp = "eq" / "ne" / "lt" / "le" / "gt" / "ge"
mathOp = "add" / "sub" / "mul" / "div" / "mod"
andOrOp =  "and" / "or"

// subExpr = identifierPart / anyMethodCallExpr / allMethodCallExpr

lambdaVariable = identifier + ":"
lambdaExpr     = lambdaVariable  filterExpr


methodCallExpr          =   anyMethodCallExpr
                          / allMethodCallExpr
                          / replaceMethodCallExpr
                          / substring2MethodCallExpr
                          / substring3MethodCallExpr
                          / toLowerMethodCallExpr
                          / toUpperMethodCallExpr
                          / trimMethodCallExpr
                          / concatMethodCallExpr
                          / lengthMethodCallExpr
                          / indexOfMethodCallExpr
                          / secondMethodCallExpr
                          / minuteMethodCallExpr
                          / hourMethodCallExpr
                          / dayMethodCallExpr
                          / monthMethodCallExpr
                          / yearMethodCallExpr
                          / roundMethodCallExpr
                          / floorMethodCallExpr
                          / ceilingMethodCallExpr
                          / isOf1MethodCallExpr
                          / isOf2MethodCallExpr
                          / substringOfMethodCallExpr
                          / startsWithMethodCallExpr
                          / endsWithMethodCallExpr

anyMethodCallExpr         = n:"any"         a:larg    { return fn(n, a); }
allMethodCallExpr         = n:"all"         a:larg    { return fn(n, a); }
replaceMethodCallExpr     = n:"replace"     a:args3   { return fn(n, a); }
substring3MethodCallExpr  = n:"substring"   a:args3   { return fn(n, a); }
substring2MethodCallExpr  = n:"substring"   a:args2   { return fn(n, a); }
toLowerMethodCallExpr     = n:"tolower"     a:args1   { return fn(n, a); }
toUpperMethodCallExpr     = n:"toupper"     a:args1   { return fn(n, a); }
trimMethodCallExpr        = n:"trim"        a:args1   { return fn(n, a); }
concatMethodCallExpr      = n:"concat"      a:args2   { return fn(n, a); }
lengthMethodCallExpr      = n:"length"      a:args1   { return fn(n, a); }
indexOfMethodCallExpr     = n:"indexof"     a:args2   { return fn(n, a); }
substringOfMethodCallExpr = n:"substringof" a:args2   { return fn(n, a); }
startsWithMethodCallExpr  = n:"startswith"  a:args2   { return fn(n, a); }
endsWithMethodCallExpr    = n:"endswith"    a:args2   { return fn(n, a); }
secondMethodCallExpr      = n:"second"      a:args1   { return fn(n, a); }
minuteMethodCallExpr      = n:"minute"      a:args1   { return fn(n, a); }
hourMethodCallExpr        = n:"hour"        a:args1   { return fn(n, a); }
dayMethodCallExpr         = n:"day"         a:args1   { return fn(n, a); }
monthMethodCallExpr       = n:"month"       a:args1   { return fn(n, a); }
yearMethodCallExpr        = n:"year"        a:args1   { return fn(n, a); }

roundMethodCallExpr       = n:"round"       a:args1   { return fn(n, a); }
ceilingMethodCallExpr     = n:"ceiling"     a:args1   { return fn(n, a); }
floorMethodCallExpr       = n:"floor"       a:args1   { return fn(n, a); }

isOf1MethodCallExpr       = n:"isof"        a:args1   { return fn(n, a); }
isOf2MethodCallExpr       = n:"isof"        a:args2   { return fn(n, a); }

larg  = "(" p1:lambdaExpr ")"                               { return [ p1 ]; }
args1 = "(" p1:filterExpr ")"                                 { return [ p1 ]; }
args2 = "(" p1:filterExpr "," p2:filterExpr ")"                 { return [ p1, p2 ]; }
args3 = "(" p1:filterExpr "," p2:filterExpr "," p3:filterExpr ")" { return [ p1, p2, p3 ]; }


unsupported                 =   "$" er:.* { return { error: "unsupported method: " + er }; }

//end: OData query options

/*
 * OData query
 */

expList                     = e:exp "&" el:expList { return [e].concat(el); } /
                              e:exp { return [e]; }
                              

exp                         =   expand /
                                filter /
                                orderby /
                                skip /
                                top /
                                format /
                                inlinecount /
                                select /
                                unsupported

query                       = list:expList {
                                    //turn the array into an object like:
                                    // { $top: 5, $skip: 10 }
                                    var result = {};
                                    list = list || [];
                                    for(var i in list){

                                        if (list[i] !== "") {
                                            var paramName = Object.keys(list[i])[0]; //ie: $top
                                            result[paramName] = list[i][paramName];
                                        }
                                    }
                                    return result;
                                }