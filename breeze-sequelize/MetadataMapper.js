var Sequelize    = require('Sequelize');
var _            = require('lodash');

var breeze       = require("breeze-client");
var utils        = require('./utils.js');

var log = utils.log;

// module.exports = MetadataMapper;

module.exports = MetadataMapper = function(breezeMetadata, sequelize) {
  this.breezeMetadata = breezeMetadata;
  this.sequelize = sequelize;
}

MetadataMapper.prototype.mapToSqTypes = function() {
  var ms = new breeze.MetadataStore();
  ms.importMetadata(this.breezeMetadata);
  var allTypes = ms.getEntityTypes();
  var typeMap = _.groupBy(allTypes, function(t) {
    return t.isComplexType ? "complexType" : "entityType";
  });
  var complexTypes = typeMap["complexType"];
  var entityTypes = typeMap["entityType"];
  var sqTypes = entityTypes.map(function(entityType) {
    var typeConfig = mapToSqTypeConfig(this, entityType);

    var sqType = this.sequelize.define(entityType.shortName, typeConfig);

  }, this);
  return sqTypes;
};


function mapToSqTypeConfig(mapper, entityOrComplexType) {
  // propConfig looks like
  //   {   firstProp: { type: Sequelize.XXX, ... },
  //       secondProp: { type: Sequelize.XXX, ... }
  //       ..
  //   }

  var typeConfig = {};
  entityOrComplexType.dataProperties.forEach(function(dataProperty) {
    var propConfig = mapToSqPropConfig(mapper,  dataProperty);
    _.merge(typeConfig, propConfig);
  });

  return typeConfig;
}

function mapToSqPropConfig(mapper, dataProperty) {
  if (dataProperty.isComplexProperty) {
    return mapToSqTypeConfig(mapper, dataProperty.dataType);
  }
  var propConfig = {};
  var attributes = {};
  propConfig[dataProperty.nameOnServer] = attributes;
  var sqType = _dataTypeMap[dataProperty.dataType.name];
  if (sqType == null) {
    var template = _.template("Unable to map the dataType '${ dataType }' of dataProperty: '${ dataProperty }'");
    throw new Error( template({ dataProperty: dataProperty.parentType.shortName + "." + dataProperty.name, dataType: dataProperty.dataType.name }));
  }
  attributes.type = sqType;
  if (!dataProperty.isNullable) {
    attributes.allowNull = false;
  }
  if (dataProperty.isPartOfKey) {
    attributes.primaryKey = true;
    if (dataProperty.parentType.AutoGeneratedKeyType == breeze.AutoGeneratedKeyType.Identity) {
      attributes.autoIncrement = true;
    }
  }
  return propConfig;
}

var _dataTypeMap = {
  String: Sequelize.STRING,
  Boolean: Sequelize.BOOLEAN,
  DateTime: Sequelize.DATE,
  DateTimeOffset: Sequelize.DATE,
  Byte: Sequelize.INTEGER.UNSIGNED,
  Int16: Sequelize.INTEGER,
  Int32: Sequelize.INTEGER,
  Int64: Sequelize.BIGINT,
  Decimal: Sequelize.DECIMAL,
  Double: Sequelize.FLOAT,
  Single: Sequelize.FLOAT,
  Guid: Sequelize.UUID,
  Binary: Sequelize.STRING.BINARY,
  Time: Sequelize.STRING,
  Undefined: Sequelize.BLOB
};