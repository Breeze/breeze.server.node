import { AutoGeneratedKeyType, DataProperty, DataType, EntityType, MetadataStore } from "breeze-client";
import { DataTypes, ModelType, Sequelize, StringDataType } from "sequelize";

/** Maps Sequelize model definitions to Breeze metadata */
export class ModelMapper {
  readonly metadataStore: MetadataStore;

  constructor(metadataStore: MetadataStore) {
    this.metadataStore = metadataStore;
  }

  /** Add all the Sequelize Models to the MetadataStore */
  addModels(sequelize: Sequelize, namespace: string) {
    const models = sequelize.models;
    const modelNames = Object.keys(models);
    modelNames.forEach(name => {
      console.log(`Adding ${name}`);
      const modelCtor = sequelize.model(name);
      this.addModel(modelCtor, namespace);
    });
  }

  /** Convert the Sequelize Model to a Breeze EntityType and add it to the MetadataStore */
  addModel(model: ModelType, namespace: string) {
    const config = {
      shortName: model.name,
      namespace: namespace,
      defaultResourceName: model.name,
      // baseTypeName - TODO support hierarchy
    };
    const et = new EntityType(config);
    const attrNames = Object.keys(model.rawAttributes);
    const version = model.options.version === true ? "version" : model.options.version;
    attrNames.forEach(attrName => {
      const attr = model.rawAttributes[attrName];
      const dataType = this.mapDataType(attr.type);

      if (!dataType || dataType === DataType.Undefined) {
        console.log(`Sequelize data type ${attr.type} is not supported.  Model ${model.name}, attr ${attrName}.`);
      }

      const dp = new DataProperty({
        nameOnServer: attr.field,
        isNullable: attr.allowNull,
        isPartOfKey: attr.primaryKey,
        dataType: dataType,
        defaultValue: attr.defaultValue,
      });

      if (version && attrName === version) {
        dp.concurrencyMode = "Fixed";
      }

      const maxLength = this.getLength(attr.type);
      if (maxLength) {
        dp.maxLength = maxLength;
      }

      if (attr.primaryKey && attr.autoIncrement) {
        // Guessing about Identity vs KeyGenerator
        et.autoGeneratedKeyType = dataType.isInteger ? AutoGeneratedKeyType.Identity : AutoGeneratedKeyType.KeyGenerator;
      }

      if (attr.references) {
        // TODO add the navigation property,
        // then later process all entities to determine the inverse collections
      }

      et.addProperty(dp);
    });
    this.metadataStore.addEntityType(et);
  }

  /** Return the Breeze DataType for the given Sequelize DataType */
  private mapDataType(sqDataType: DataTypes.DataType): DataType {
    const name = (typeof sqDataType === "string") ? sqDataType as string : sqDataType.key;
    return this.dataTypeMap[name];
  }

  /** For string data types, return the length, else undefined */
  private getLength(sqDataType: DataTypes.DataType): number {
    if (typeof sqDataType === "string" || (sqDataType.key !== "STRING" && sqDataType.key !== "CHAR")) {
      return undefined;
    }
    const stringType = sqDataType as StringDataType;
    return stringType.options && stringType.options.length;
  }

  /** Map from Sequelize DataTypes.DataType to Breeze DataType*/
  private dataTypeMap = {
    "STRING": DataType.String,
    "CHAR": DataType.String,
    "TEXT": DataType.String,
    "NUMBER": DataType.Decimal,
    "TINYINT": DataType.Byte,
    "SMALLINT": DataType.Int16,
    "MEDIUMINT": DataType.Int32, // 24 bits in Sequelize
    "INTEGER": DataType.Int32,
    "BIGINT": DataType.Int64,
    "FLOAT": DataType.Single,
    "REAL": DataType.Single,
    "DOUBLE": DataType.Double,
    "DECIMAL": DataType.Decimal,
    "BOOLEAN": DataType.Boolean,
    "TIME": DataType.Time,
    "DATE": DataType.DateTime,
    "DATEONLY": DataType.DateTime,
    "HSTORE": DataType.Undefined, // not supported
    "JSON": DataType.String,
    "JSONB": DataType.String,
    "NOW": DataType.DateTimeOffset,
    "BLOB": DataType.Binary,
    "RANGE": DataType.Undefined, // not supported
    "UUID": DataType.Guid,
    "UUIDV1": DataType.Guid,
    "UUIDV4": DataType.Guid,
    "VIRTUAL": DataType.String, // not stored in DB; has subtype of actual data type
    "ENUM": DataType.String,
    "ARRAY": DataType.Undefined, // not supported; should use complex type for this
    "GEOMETRY": DataType.String,
    "GEOGRAPHY": DataType.String,
    "CIDR": DataType.String,
    "INET": DataType.String,
    "MACADDR": DataType.String,
    "CITEXT": DataType.String,
  };

}
